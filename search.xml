<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hive2的启动</title>
    <url>/2020/06/26/hive2%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<ol>
<li>启动hive的服务<br>hive ‐‐service hiveserver2 &amp;</li>
<li>使用beeline，去连接thrift的服务<br>beeline -u jdbc:hive2://CentOS-01:10000</li>
</ol>
]]></content>
      <categories>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>hive</tag>
        <tag>服务</tag>
        <tag>beeline</tag>
      </tags>
  </entry>
  <entry>
    <title>数据质量检查</title>
    <url>/2020/06/26/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="数据质量检查"><a href="#数据质量检查" class="headerlink" title="数据质量检查"></a>数据质量检查</h2><p>是在完成宽表数据开发后进行的，主要包括四个方面：</p>
<ol>
<li><p>重复值检查</p>
</li>
<li><p>缺失值检查</p>
</li>
<li><p>数据倾斜问题</p>
</li>
<li><p>异常值检查</p>
<a id="more"></a>

</li>
</ol>
<h2 id="1-重复值检查"><a href="#1-重复值检查" class="headerlink" title="1. 重复值检查"></a>1. 重复值检查</h2><h3 id="1-1-什么是重复值"><a href="#1-1-什么是重复值" class="headerlink" title="1.1 什么是重复值"></a>1.1 什么是重复值</h3><p>重复值的检查首先要明确一点，即重复值的定义。对于一份二维表形式的数据集来说，什么是重复值？主要有两个层次：<br>① 关键字段出现重复记录，比如主索引字段出现重复；<br>② 所有字段出现重复记录。<br>第一个层次是否是重复，必须从这份数据的业务含义进行确定。比如一张表，从业务上讲，一个用户应该只会有一条记录，那么如果某个用户出现了超过一条的记录，那么这就是重复值。第二个层次，就一定是重复值了。</p>
<h3 id="1-2-重复值产生的原因"><a href="#1-2-重复值产生的原因" class="headerlink" title="1.2 重复值产生的原因"></a>1.2 重复值产生的原因</h3><p>重复值的产生主要有两个原因，一是上游源数据造成的，二是数据准备脚本中的数据关联造成的。从数据准备角度来看，首先检查数据准备的脚本，判断使用的源表是否有重复记录，同时检查关联语句的正确性和严谨性，比如关联条件是否合理、是否有限定数据周期等等。<br>比如：检查源表数据是否重复的SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MON_ID,<span class="keyword">COUNT</span>(*),<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> USER_ID)</span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> MON_ID;</span><br></pre></td></tr></table></figure>

<p>如果是上游源数据出现重复，那么应该及时反映给上游进行修正；如果是脚本关联造成的，修改脚本，重新生成数据即可。<br>还有一份情况，这份数据集是一份单独的数据集，并不是在数据仓库中开发得到的数据，既没有上游源数据，也不存在生成数据的脚本，比如公开数据集，那么如何处理其中的重复值？一般的处理方式就是直接删除重复值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dataset = pd.read_excel(<span class="string">"/labcenter/python/dataset.xlsx"</span>)</span><br><span class="line"><span class="comment">#判断重复数据</span></span><br><span class="line">dataset.duplicated()    <span class="comment">#全部字段重复是重复数据</span></span><br><span class="line">dataset.duplicated([<span class="string">'col2'</span>])    <span class="comment">#col2字段重复是重复数据</span></span><br><span class="line"><span class="comment">#删除重复数据</span></span><br><span class="line">dataset.drop_duplicates()     <span class="comment">#全部字段重复是重复数据</span></span><br><span class="line">dataset.drop_duplicates([<span class="string">'col2'</span>])   <span class="comment">#col2字段重复是重复数据</span></span><br></pre></td></tr></table></figure>

<h2 id="2-缺失值检查"><a href="#2-缺失值检查" class="headerlink" title="2. 缺失值检查"></a>2. 缺失值检查</h2><p>缺失值主要是指数据集中部分记录存在部分字段的信息缺失。</p>
<h3 id="2-1-缺失值出现的原因"><a href="#2-1-缺失值出现的原因" class="headerlink" title="2.1 缺失值出现的原因"></a>2.1 缺失值出现的原因</h3><p>出现趋势值主要有三种原因：<br>① 上游源系统因为技术或者成本原因无法完全获取到这一信息，比如对用户手机APP上网记录的解析；<br>② 从业务上讲，这一信息本来就不存在，比如一个学生的收入，一个未婚者的配偶姓名；<br>③ 数据准备脚本开发中的错误造成的。<br>第一种原因，短期内无法解决；第二种原因，数据的缺失并不是错误，无法避免；第三种原因，则只需通过查证修改脚本即可。<br>缺失值的存在既代表了某一部分信息的丢失，也影响了挖掘分析结论的可靠性与稳定性，因此，必须对缺失值进行处理。<br>如果缺失值记录数超过了全部记录数的50%，则应该从数据集中直接剔除掉该字段，尝试从业务上寻找替代字段；<br>如果缺失值记录数没有超过50%，则应该首先看这个字段在业务上是否有替代字段，如果有，则直接剔除掉该字段，如果没有，则必须对其进行处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看哪些字段有缺失值   </span></span><br><span class="line">dataset.isnull().any()    <span class="comment">#获取含有NaN的字段</span></span><br><span class="line"><span class="comment">#统计各字段的缺失值个数</span></span><br><span class="line">dataset.isnull().apply(pd.value_counts)</span><br><span class="line"><span class="comment">#删除含有缺失值的字段</span></span><br><span class="line">nan_col = dataset.isnull().any()</span><br><span class="line">dataset.drop(nan_col[nan_col].index,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-缺失值的处理"><a href="#2-2-缺失值的处理" class="headerlink" title="2.2 缺失值的处理"></a>2.2 缺失值的处理</h3><p>缺失值的处理主要有两种方式：过滤和填充。</p>
<h4 id="（1）缺失值的过滤"><a href="#（1）缺失值的过滤" class="headerlink" title="（1）缺失值的过滤"></a>（1）缺失值的过滤</h4><p>直接删除含有缺失值的记录，总体上会影响样本个数，如果删除样本过多或者数据集本来就是小数据集时，这种方式并不建议采用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除含有缺失值的记录</span></span><br><span class="line">dataset.dropna()</span><br></pre></td></tr></table></figure>

<h4 id="2）缺失值的填充"><a href="#2）缺失值的填充" class="headerlink" title="2）缺失值的填充"></a>2）缺失值的填充</h4><p>缺失值的填充主要三种方法：<br>① 方法一：使用特定值填充<br>使用缺失值字段的平均值、中位数、众数等统计量填充。<br>优点：简单、快速<br>缺点：容易产生数据倾斜<br>② 方法二：使用算法预测填充<br>将缺失值字段作为因变量，将没有缺失值字段作为自变量，使用决策树、随机森林、KNN、回归等预测算法进行缺失值的预测，用预测结果进行填充。<br>优点：相对精确<br>缺点：效率低，如果缺失值字段与其他字段相关性不大，预测效果差<br>③ 方法三：将缺失值单独作为一个分组，指定值进行填充<br>从业务上选择一个单独的值进行填充，使缺失值区别于其他值而作为一个分组，从而不影响算法计算。<br>优点：简单，实用<br>缺点：效率低</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用Pandas进行特定值填充</span></span><br><span class="line">dataset.fillna(<span class="number">0</span>)   <span class="comment">#不同字段的缺失值都用0填充</span></span><br><span class="line">dataset.fillna(&#123;<span class="string">'col2'</span>:<span class="number">20</span>,<span class="string">'col5'</span>:<span class="number">0</span>&#125;)    <span class="comment">#不同字段使用不同的填充值</span></span><br><span class="line">dataset.fillna(dataset.mean())   <span class="comment">#分别使用各字段的平均值填充</span></span><br><span class="line">dataset.fillna(dataset.median())     <span class="comment">#分别使用个字段的中位数填充</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#使用sklearn中的预处理方法进行缺失值填充(只适用于连续型字段)</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Imputer</span><br><span class="line">dataset2 = dataset.drop([<span class="string">'col4'</span>],axis=<span class="number">1</span>)</span><br><span class="line">colsets = dataset2.columns</span><br><span class="line">nan_rule1 = Imputer(missing_values=<span class="string">'NaN'</span>,strategy=<span class="string">'mean'</span>,axis=<span class="number">0</span>)    <span class="comment">#创建填充规则(平均值填充)</span></span><br><span class="line">pd.DataFrame(nan_rule1.fit_transform(dataset2),columns=colsets)    <span class="comment">#应用规则</span></span><br><span class="line">nan_rule2 = Imputer(missing_values=<span class="string">'median'</span>,strategy=<span class="string">'mean'</span>,axis=<span class="number">0</span>) <span class="comment">#创建填充规则(中位数填充)</span></span><br><span class="line">pd.DataFrame(nan_rule2.fit_transform(dataset2),columns=colsets)    <span class="comment">#应用规则</span></span><br><span class="line">nan_rule3 = Imputer(missing_values=<span class="string">'most_frequent'</span>,strategy=<span class="string">'mean'</span>,axis=<span class="number">0</span>)  <span class="comment">#创建填充规则(众数填充)</span></span><br><span class="line">pd.DataFrame(nan_rule3.fit_transform(dataset2),columns=colsets)    <span class="comment">#应用规则</span></span><br></pre></td></tr></table></figure>

<h2 id="3-数据倾斜问题"><a href="#3-数据倾斜问题" class="headerlink" title="3. 数据倾斜问题"></a>3. 数据倾斜问题</h2><p>数据倾斜是指字段的取值分布主要集中在某个特定类别或者特定区间。</p>
<h3 id="3-1-数据倾斜问题的原因"><a href="#3-1-数据倾斜问题的原因" class="headerlink" title="3.1 数据倾斜问题的原因"></a>3.1 数据倾斜问题的原因</h3><p>出现这一问题的原因主要有三种：<br>① 上游源数据存在问题；<br>② 数据准备脚本的问题；<br>③ 数据本身的分布就是如此。<br>如果某个字段出现数据倾斜问题，必须首先排查上述第一、二种原因，如果都没有问题或者无法检查（如：单独的数据集），那么就要考虑这个字段对后续的分析建模是否有价值。一般来说，有严重的数据倾斜的字段对目标变量的区分能力很弱，对分析建模的价值不大，应该直接剔除掉。</p>
<h3 id="3-2-如何衡量数据的倾斜程度"><a href="#3-2-如何衡量数据的倾斜程度" class="headerlink" title="3.2 如何衡量数据的倾斜程度"></a>3.2 如何衡量数据的倾斜程度</h3><p>衡量数据的倾斜程度，主要采用频数分析方法，但因数据类别的不同而有所差异：<br>① 针对连续型字段，需要首先采用等宽分箱方式进行离散化，然后计算各分箱的记录数分布；<br>② 针对离散型字段，直接计算各类别的记录数分布。<br>一般来说，如果某个字段90%以上的记录数，主要集中在某个特定类别或者特定区间，那么这个字段就存在严重的数据倾斜问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对于连续型变量进行等宽分箱</span></span><br><span class="line">pd.value_counts(pd.cut(dataset[<span class="string">'col3'</span>],<span class="number">5</span>))  <span class="comment">#分成5箱</span></span><br><span class="line"><span class="comment">#对于离散型变量进行频数统计</span></span><br><span class="line">pd.value_counts(dataset[<span class="string">'col4'</span>])</span><br></pre></td></tr></table></figure>

<h2 id="4-异常值检查"><a href="#4-异常值检查" class="headerlink" title="4. 异常值检查"></a>4. 异常值检查</h2><p>异常值是指数据中出现了处于特定分布、范围或者趋势之外的数据，这些数据一般会被成为异常值、离群点、噪音等。</p>
<h3 id="4-1-异常值产生的原因"><a href="#4-1-异常值产生的原因" class="headerlink" title="4.1 异常值产生的原因"></a>4.1 异常值产生的原因</h3><p>异常值的产生主要有两类原因：<br>① 数据采集、生成或者传递过程中发生的错误；<br>② 业务运营过程出现的一些特殊情况。<br>将第一种原因产生的异常值称为统计上的异常，这是错误带来的数据问题，需要解决；将第二种原因产生的异常值称为业务上的异常，反映了业务运营过程的某种特殊结果，它不是错误，但需要深究，在数据挖掘中的一种典型应用就是异常检测模型，比如信用卡欺诈，网络入侵检测、客户异动行为识别等等。</p>
<h3 id="4-2-异常值的识别方法"><a href="#4-2-异常值的识别方法" class="headerlink" title="4.2 异常值的识别方法"></a>4.2 异常值的识别方法</h3><p>异常值的识别方法主要有以下几种：</p>
<h4 id="（1）极值检查"><a href="#（1）极值检查" class="headerlink" title="（1）极值检查"></a>（1）极值检查</h4><p>主要检查字段的取值是否超出了合理的值域范围。<br>① 方法一：最大值最小值<br>使用最大值、最小值进行判断。比如客户年龄的最大值为199岁，客户账单的最小费用为-20，这些都明显存在异常。<br>② 方法二：3σ原则<br>如果数据服从正态分布，在3σ原则下，异常值被定义为与平均值的偏差超过了3倍标准差的值。这是因为，在正态分布的假设下，具体平均值3倍标准差之外的值出现的概率低于0.003，属于极个别的小概率事件。<br>③ 方法三：箱线图分析<br>箱线图提供了识别异常的标准：异常值被定义为小于下四分位-1.5倍的四分位间距，或者大于上四分位+1.5倍的四分位间距的值。<br>箱线图分析不要求数据服从任何分布，因此对异常值的识别比较客观。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#计算相关统计指标</span></span><br><span class="line">statDF = dataset2.describe()  <span class="comment">#获取描述性统计量</span></span><br><span class="line">statDF.loc[<span class="string">'mean+3std'</span>] = statDF.loc[<span class="string">'mean'</span>] + <span class="number">3</span> * statDF.loc[<span class="string">'std'</span>]  <span class="comment">#计算平均值+3倍标准差</span></span><br><span class="line">statDF.loc[<span class="string">'mean-3std'</span>] = statDF.loc[<span class="string">'mean'</span>] - <span class="number">3</span> * statDF.loc[<span class="string">'std'</span>]  <span class="comment">#计算平均值-3倍标准差</span></span><br><span class="line">statDF.loc[<span class="string">'75%+1.5dist'</span>] = statDF.loc[<span class="string">'75%'</span>] + <span class="number">1.5</span> * (statDF.loc[<span class="string">'75%'</span>] - statDF.loc[<span class="string">'25%'</span>])  <span class="comment">#计算上四分位+1.5倍的四分位间距</span></span><br><span class="line">statDF.loc[<span class="string">'25%-1.5dist'</span>] = statDF.loc[<span class="string">'25%'</span>] - <span class="number">1.5</span> * (statDF.loc[<span class="string">'75%'</span>] - statDF.loc[<span class="string">'25%'</span>])  <span class="comment">#计算下四分位-1.5倍的四分位间距</span></span><br><span class="line"><span class="comment">#获取各字段最大值、最小值</span></span><br><span class="line">statDF.loc[[<span class="string">'max'</span>,<span class="string">'min'</span>]]</span><br><span class="line"><span class="comment">#判断取值是否大于平均值+3倍标准差</span></span><br><span class="line">dataset3 = dataset2 - statDF.loc[<span class="string">'mean+3std'</span>]</span><br><span class="line">dataset3[dataset3&gt;<span class="number">0</span>]</span><br><span class="line"><span class="comment">#判断取值是否小于平均值-3倍标准差</span></span><br><span class="line">dataset4 = dataset2 - statDF.loc[<span class="string">'mean-3std'</span>]</span><br><span class="line">dataset4[dataset4&lt;<span class="number">0</span>]</span><br><span class="line"><span class="comment">#判断取值是否大于上四分位+1.5倍的四分位间距</span></span><br><span class="line">dataset5 = dataset2 - statDF.loc[<span class="string">'75%+1.5dist'</span>]</span><br><span class="line">dataset5[dataset5&gt;<span class="number">0</span>]</span><br><span class="line"><span class="comment">#判断取值是否小于下四分位-1.5倍的四分位间距</span></span><br><span class="line">dataset6 = dataset2 - statDF.loc[<span class="string">'25%-1.5dist'</span>]</span><br><span class="line">dataset6[dataset6&lt;<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h4 id="（2）记录数分布检查"><a href="#（2）记录数分布检查" class="headerlink" title="（2）记录数分布检查"></a>（2）记录数分布检查</h4><p>主要检查字段的记录数分布是否超出合理的分布范围，包括三个指标：零值记录数、正值记录数、负值记录数。</p>
<h4 id="（3）波动检查"><a href="#（3）波动检查" class="headerlink" title="（3）波动检查"></a>（3）波动检查</h4><p>波动检查主要适用于有监督的数据，用于检查随着自变量的变化，因变量是否发生明显的波动情况。<br>以上异常值的识别方法主要针对连续型的字段，而对于离散型的字段的异常识别主要通过检查类别出现是否出现了合理阈值外的数据，比如苹果终端型号字段，出现了“P20”的取值。</p>
<h3 id="4-3-异常值的处理"><a href="#4-3-异常值的处理" class="headerlink" title="4.3 异常值的处理"></a>4.3 异常值的处理</h3><p>对于统计上的异常值的处理，主要采取两种方式：剔除或者替换。剔除是指直接将被标记为异常值的记录从数据集中删除掉，而替换是指将异常值用一个非异常值进行替换，比如边界值，或者有监督情况下的目标变量表征相似的某个值。<br>对于业务上的异常值的处理，原则就是进行深入探索分析，查找出现这一特殊情况的根本原因。</p>
]]></content>
      <categories>
        <category>数据质量</category>
      </categories>
      <tags>
        <tag>质量检查</tag>
        <tag>数仓</tag>
        <tag>数据质量</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop从mysql导入数据到hive</title>
    <url>/2020/07/22/sqoop%E4%BB%8Emysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0hive/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Sqoop是一个用来将Hadoop和关系型数据库中的数据相互转移的工具，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。Sqoop专为大数据批量传输设计，能够分割数据集并创建Hadoop任务来处理每个区块。</p>
<pre><code>把MySQL、Oracle等数据库中的数据导入到HDFS、Hive、HBase中。
把HDFS、Hive、HBase中的数据导出到MySQL、Oracle等数据库中。
1.4 为sqoop1, 1.9 为sqoop2 ，sqoop1与sqoop2是不兼容的。</code></pre><a id="more"></a>

<h3 id="实现需要"><a href="#实现需要" class="headerlink" title="实现需要"></a>实现需要</h3><p>数据库:</p>
<ul>
<li>driver</li>
<li>URL、username、password</li>
<li>database、table</li>
</ul>
<p>hadoop:</p>
<ul>
<li>type (hdfp、hive、hbase)</li>
<li>path 存储到哪里？</li>
<li>数据分隔符</li>
<li>mappers 数量，也就是使用多少线程。</li>
</ul>
<h2 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h2><h3 id="查看-sqoop-支持的命令"><a href="#查看-sqoop-支持的命令" class="headerlink" title="查看 sqoop 支持的命令"></a>查看 sqoop 支持的命令</h3><p>  sqoop help</p>
<h3 id="显示所有库名"><a href="#显示所有库名" class="headerlink" title="显示所有库名"></a>显示所有库名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqoop list-databases \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.66.4:3306 \</span></span><br><span class="line"><span class="comment">--username sendi \</span></span><br><span class="line"><span class="comment">--password 1234</span></span><br></pre></td></tr></table></figure>

<h3 id="显示某个数据库里所有表"><a href="#显示某个数据库里所有表" class="headerlink" title="显示某个数据库里所有表"></a>显示某个数据库里所有表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqoop list-tables \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.66.4:3306/networkmanagement \</span></span><br><span class="line"><span class="comment">--username sendi \</span></span><br><span class="line"><span class="comment">--password 1234</span></span><br></pre></td></tr></table></figure>

<h3 id="MYSQL-导入数据到-HIVE"><a href="#MYSQL-导入数据到-HIVE" class="headerlink" title="MYSQL 导入数据到 HIVE"></a>MYSQL 导入数据到 HIVE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqoop import</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.66.4:3306/networkmanagement \</span></span><br><span class="line"><span class="comment">--username sendi \</span></span><br><span class="line"><span class="comment">--password 1234 \</span></span><br><span class="line"><span class="comment">--table people</span></span><br><span class="line"><span class="comment">--hive-import </span></span><br><span class="line"><span class="comment">--create-hive-table </span></span><br><span class="line"><span class="comment">--fields-terminated-by "\t"</span></span><br><span class="line">-m 5</span><br></pre></td></tr></table></figure>

<h3 id="hive-参数"><a href="#hive-参数" class="headerlink" title="hive 参数"></a>hive 参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–hive-import 必须参数，指定导入hive</span><br><span class="line">–hive-database default hive库名</span><br><span class="line">–hive-table people hive表名</span><br><span class="line">–fields-terminated-by hive的分隔符</span><br><span class="line">–hive-overwrite 重写重复字段</span><br><span class="line">–create-hive-table 帮创建好 hive 表，但是表存在会出错。不建议使用这个参数，因为到导入的时候，会与我们的字段类型有出入。</span><br><span class="line">–hive-partition-key “dt” 指定分区表的字段</span><br><span class="line">–hive-partition-value “2018-08-08” 指定分区表的值</span><br></pre></td></tr></table></figure>

<h3 id="导出没有主键的表"><a href="#导出没有主键的表" class="headerlink" title="导出没有主键的表"></a>导出没有主键的表</h3><p>可以使用两种方式：</p>
<ul>
<li>–split-by 指定切分的字段</li>
<li>-m 1 : 设置只使用一个map进行数据迁移</li>
</ul>
<h3 id="过滤条件"><a href="#过滤条件" class="headerlink" title="过滤条件"></a>过滤条件</h3><p>–where “age&gt;18” 匹配条件<br>       –columns “name,age” 选择要导入的指定列<br>       –query ‘select * from people where age&gt;18 and $CONDITIONS’: sql语句查询的结果集<br>      不能 –table 一起使用<br>      需要指定 –target-dir 路径 </p>
<h3 id="当数据库中字符为空时的处理"><a href="#当数据库中字符为空时的处理" class="headerlink" title="当数据库中字符为空时的处理"></a>当数据库中字符为空时的处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–null-non-string ‘0’ 当不是字符串的数据为空的时候，用 0 替换</span><br><span class="line">–null-string ‘string’ 当字符串为空的时候，使用string 字符替换</span><br></pre></td></tr></table></figure>

<h3 id="提高传输速度"><a href="#提高传输速度" class="headerlink" title="提高传输速度"></a>提高传输速度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–direct 提高数据库到hadoop的传输速度</span><br></pre></td></tr></table></figure>

<p>支持的数据库类型与版本：</p>
<ul>
<li>myslq 5.0 以上</li>
<li>oracle 10.2.0 以上</li>
</ul>
<h3 id="增量导入"><a href="#增量导入" class="headerlink" title="增量导入"></a>增量导入</h3><p>增量导入对应，首先需要知监控那一列，这列要从哪个值开始增量</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">* check-column id 用来指定一些列</span><br><span class="line">* 这些被指定的列的类型不能使任意字符类型，如char、varchar等类型都是不可以的,常用的是指定主键id.</span><br><span class="line">* –check-column 可以去指定多个列</span><br></pre></td></tr></table></figure>

<ul>
<li>last-value 10 从哪个值开始增量</li>
<li>incremental 增量的模式<ul>
<li>append id 是获取大于某一列的某个值。</li>
<li>lastmodified “2016-12-15 15:47:30” 获取某个时间后修改的所有数据<ul>
<li>–append 附加模式</li>
<li>–merge-key id 合并模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注意：增量导入不能与 –delete-target-dir 一起使用，还有必须指定增量的模式</p>
]]></content>
      <categories>
        <category>Sqoop</category>
      </categories>
      <tags>
        <tag>hive</tag>
        <tag>Sqoop</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
